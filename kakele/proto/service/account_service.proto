syntax = "proto2";

package mmorpg.proto.service;

import "common/other/vocation.proto";
import "service/character_market.proto";
import "service/debug.proto";
import "service/moderation.proto";
import "service/other.proto";
import "service/payment.proto";
import "service/player.proto";
import "service/service.proto";
import "service/token_swap.proto";

message AccountServiceRequest {
    oneof request {
        CreateAccountRequest create_account = 1;
        GetLoginKeyRequest get_login_key = 2;
        CreatePlayerRequest create_player = 3;
        GetPlayersRequest get_players = 4;
        PingRequest ping = 5;
        ListWorldsRequest list_worlds = 6;
        RecordExceptionRequest record_exception = 7;
        CreatePaymentRequest create_payment = 8;
        RecoverAccountRequest recover_account = 10;
        ChangePasswordRequest change_password = 11;
        GetPaymentsRequest get_payments = 12;
        CancelPaymentRequest cancel_payment = 13;
        BuyPremiumRequest buy_premium = 14;
        ChangeNameRequest change_name = 15;
        ChangeEmailRequest change_email = 16;
        GetReferralsRequest get_referrals = 17;
        ClaimReferralRequest claim_referral = 18;
        DeleteReferralRequest delete_referral = 19;
        AdminRequest admin = 20;
        UpdatePendingPaymentRequest update_pending_payment = 21;
        CalculateTransferableCoinsRequest calculate_transferable_coins = 22;
        DeleteCharacterRequest delete_character = 23;
        ChangeWorldRequest change_world = 24;
        UndeletePlayerRequest undelete_player = 25;
        GetDeletedPlayersRequest get_deleted_players = 26;
        CharacterMarketRequest character_market = 27;
        TokenSwapRequest token_swap = 28;
        SetOneTimePasswordRequest set_one_time_password = 29;
        GetRecoveryKeyRequest get_recovery_key = 30;
        ClaimCouponRequest claim_coupon = 31;
        DebugRequest debug = 1000;
    }
}

message AccountServiceResponse {
    oneof response {
        CreateAccountResponse create_account = 1;
        GetLoginKeyResponse get_login_key = 2;
        CreatePlayerResponse create_player = 3;
        GetPlayersResponse get_players = 4;
        PingResponse ping = 5;
        ListWorldsResponse list_worlds = 6;
        RecordExceptionResponse record_exception = 7;
        CreatePaymentResponse create_payment = 8;
        RecoverAccountResponse recover_account = 10;
        ChangePasswordResponse change_password = 11;
        GetPaymentsResponse get_payments = 12;
        CancelPaymentResponse cancel_payment = 13;
        BuyPremiumResponse buy_premium = 14;
        ChangeNameResponse change_name = 15;
        ChangeEmailResponse change_email = 16;
        GetReferralsResponse get_referrals = 17;
        ClaimReferralResponse claim_referral = 18;
        DeleteReferralResponse delete_referral = 19;
        AdminResponse admin = 20;
        UpdatePendingPaymentResponse update_pending_payment = 21;
        CalculateTransferableCoinsResponse calculate_transferable_coins = 22;
        DeleteCharacterResponse delete_character = 23;
        ChangeWorldResponse change_world = 24;
        UndeletePlayerResponse undelete_player = 25;
        GetDeletedPlayersResponse get_deleted_players = 26;
        CharacterMarketResponse character_market = 27;
        TokenSwapResponse token_swap = 28;
        SetOneTimePasswordResponse set_one_time_password = 29;
        GetRecoveryKeyResponse get_recovery_key = 30;
        ClaimCouponResponse claim_coupon = 31;
    }
}

message CreateAccountRequest {
    optional bytes encrypted_email = 1;
    optional bytes encrypted_password = 2;
    optional Language.Enum interface_language = 5;
    
    oneof code {
        string referral_code = 3;
        string publisher_code = 4;
    }
}

message CreateAccountResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        EMAIL_IN_USE = 2;
        INVALID_REFERRAL = 3;
        OTHER_ERROR = 4;
    }
    
    optional bytes encrypted_login_key = 2;
}

message GetLoginKeyRequest {
    optional Language.Enum interface_language = 3;
    
    oneof login_method {
        LoginWithEmailAndPassword login_with_email_and_password = 1;
        LoginWithRecoveryKey login_with_recovery_key = 2;
    }
    
    message LoginWithEmailAndPassword {
        optional bytes encrypted_email = 1;
        optional bytes encrypted_password = 2;
        optional bytes encrypted_one_time_password = 4;
    }
    
    message LoginWithRecoveryKey {
        optional bytes encrypted_recovery_key = 1;
    }
}

message GetLoginKeyResponse {
    optional bytes encrypted_login_key = 1;
    
    optional Status status = 2;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        INVALID_LOGIN = 2;
        OTHER_ERROR = 3;
        BANNED = 4;
        OTP_REQUIRED_AND_NOT_SET = 5;
    }
    
    optional Ban ban = 3;
    message Ban {
        optional int32 hours_left = 1;
        optional ModerationEntry.Reason reason = 2;
        optional string public_comments = 3;
    }
}

message CreatePlayerRequest {
    optional bytes encrypted_login_key = 1;
    optional string name = 2;
    optional common.other.Vocation.Enum vocation = 3;
}

message CreatePlayerResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        NAME_NOT_AVAILABLE = 2;
        OUT_OF_SYNC = 3;
        TOO_MANY_PLAYERS = 4;
        OTHER_ERROR = 5;
    }
}

message GetPlayersRequest {
    optional bytes encrypted_login_key = 1;
}

message GetPlayersResponse {
    repeated AccountPlayer player = 1;
    optional string online_player = 2;
    
    optional Status status = 3;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        REFRESH_LOGIN_KEY = 2;
        OTHER_ERROR = 3;
    }
    
    optional int64 kakele_coins = 4;
    optional int64 transferable_kakele_coins = 5;
    optional int64 premium_until_unix_seconds = 6;
    optional ModerationAccess.Enum moderation_access = 7;
    
    optional Warning warning = 8;
    message Warning {
        optional ModerationEntry.Reason reason = 1;
        optional string public_comments = 2;
    }
    
    repeated Announcement announcement = 9;
}

message ListWorldsRequest {
    optional bytes encrypted_login_key = 1;
    optional int32 world_id = 2;
}

message ListWorldsResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OUT_OF_SYNC = 2;
        OTHER_ERROR = 3;
    }
    
    repeated WorldInfo world_info = 2;
    message WorldInfo {
        optional string replica = 1;
        optional string ip = 2;
        optional int32 port = 3;
        optional int32 players_online = 4;
        optional bool is_open_pvp = 5;
        optional bool available_for_transfer = 6;
    }
}

message RecordExceptionRequest {
    optional string exception = 1;
    optional string device_name = 2;
}

message RecordExceptionResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        TOO_BUSY = 2;
        OTHER_ERROR = 3;
    }
}

message RecoverAccountRequest {
    optional bytes encrypted_email = 1;
}

message RecoverAccountResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        INVALID_EMAIL = 2;
        EMAIL_SENT_ALREADY = 3;
        OTHER_ERROR = 4;
    }
}

message ChangePasswordRequest {
    optional bytes encrypted_new_password = 1;
    
    oneof auth_method {
        AuthWithLoginKey auth_with_login_key = 2;
        AuthWithRecoveryToken auth_with_recovery_token = 3;
    }
    
    message AuthWithLoginKey {
        optional bytes encrypted_login_key = 1;
        optional bytes encrypted_password = 2;
    }
    
    message AuthWithRecoveryToken {
        optional bytes encrypted_email = 1;
        optional bytes encrypted_recovery_token_or_key = 2;
    }
}

message ChangePasswordResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        INVALID_AUTH = 2;
        OTHER_ERROR = 3;
    }
}

message GetReferralsRequest {
    optional bytes encrypted_login_key = 1;
}

message GetReferralsResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OUT_OF_SYNC = 2;
        OTHER_ERROR = 3;
    }
    
    optional string referral_code = 2;
    repeated Referral referral = 3;
}

message ClaimReferralRequest {
    optional bytes encrypted_login_key = 1;
    optional int64 referral_id = 2;
}

message ClaimReferralResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OUT_OF_SYNC = 2;
        OTHER_ERROR = 3;
    }
    
    optional int32 referred_level = 2;
}

message DeleteReferralRequest {
    optional bytes encrypted_login_key = 1;
    optional int64 referral_id = 2;
}

message DeleteReferralResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OUT_OF_SYNC = 2;
        OTHER_ERROR = 3;
    }
}

message AdminCommand {
    oneof payload {
        AddEntry entry = 1;
        List list = 2;
        CreateAnnouncement create_announcement = 3;
        CameraMode camera_mode = 4;
        GenerateCoupons generate_coupons = 5;
    }
    
    message AddEntry {
        optional string player_name = 1;
        optional ModerationEntry.Type type = 2;
        optional ModerationEntry.Reason reason = 3;
        optional string additional_information = 4;
        optional string public_comments = 5;
    }
    
    message List {
        optional string player_name = 1;
        optional string moderator_name = 2;
    }
    
    message CreateAnnouncement {
        optional Text announcement = 1;
        optional int32 announce_days = 2;
    }
    
    message CameraMode {
        optional string player_name = 1;
    }
    
    message GenerateCoupons {
        optional CouponType.Enum type = 1;
        optional CouponPayload payload = 2;
        optional int32 count = 3;
    }
}

message AdminRequest {
    optional bytes encrypted_login_key = 1;
    optional AdminCommand command = 2;
}

message AdminResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OTHER_ERROR = 2;
        OUT_OF_SYNC = 3;
        INSUFFICIENT_PRIVILEDGES = 4;
    }
    
    oneof result {
        AddEntryResult entry = 2;
        ListResult list = 3;
        CreateAnnouncementResult create_announcement = 4;
        CameraMode camera_mode = 5;
        GenerateCoupons generate_coupons = 6;
    }
    
    message AddEntryResult {
        
    }
    
    message ListResult {
        repeated ModerationEntry entry = 1;
        optional string account_email_address = 2;
        
        repeated AccountPlayerNames same_network_players = 3;
        message AccountPlayerNames {
            repeated string name = 1;
        }
    }
    
    message CreateAnnouncementResult {
        
    }
    
    message CameraMode {
        optional AccountPlayer player = 1;
        optional bool player_is_online = 2;
    }
    
    message GenerateCoupons {
        repeated string coupon_code = 1;
    }
}

message UndeletePlayerRequest {
    optional bytes encrypted_login_key = 1;
    optional string player_name = 2;
}

message UndeletePlayerResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OTHER_ERROR = 2;
        OUT_OF_SYNC = 3;
    }
}

message GetDeletedPlayersRequest {
    optional bytes encrypted_login_key = 1;
}

message GetDeletedPlayersResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OTHER_ERROR = 2;
        OUT_OF_SYNC = 3;
    }
    
    repeated AccountPlayer player = 2;
}

message SetOneTimePasswordRequest {
    optional bytes encrypted_login_key = 1;
    optional bytes encrypted_secret = 2;
    optional bytes encrypted_one_time_password = 3;
}

message SetOneTimePasswordResponse {
    optional Status status = 1;
    enum Status {
        UNKNOWN = 0;
        SUCCESSFUL = 1;
        OTHER_ERROR = 2;
        OUT_OF_SYNC = 3;
        OTP_MISMATCH = 4;
    }
}
